import edu.duke.*;
import org.apache.commons.csv.*;
/**
 * Write a description of class CaesarCipher here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class CaesarCipher
{
   public String encrypt(String input, int key)
   {
    StringBuilder encrypted = new StringBuilder(input);
    String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    String shiftedAlphabet = alphabet.substring(key) + alphabet.substring(0, key); 
     for(int i = 0 ; i< encrypted.length(); i++){
     char currChar = encrypted.charAt(i);
     int idx = alphabet.indexOf(currChar);
     if(idx != -1){
     char newChar = shiftedAlphabet.charAt(idx); 
     encrypted.setCharAt(i, newChar); 
    }
    }
    return encrypted.toString();
}
public void testCaesar()
   {
       int key = 17;
       FileResource fr = new FileResource();
       String message = fr.asString();
       String encrypted = encrypt(message, key);
       System.out.println(encrypted);
       String decrypted = encrypt(encrypted, 26-key);
       System.out.println(decrypted);
    }
public String encryptTwoKeys(String input, int key1, int key2)
   {
       StringBuilder encrypted = new StringBuilder(input);
       String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
       String shiftedAlphabet1 = alphabet.substring(key1) + alphabet.substring(0, key1);
       String shiftedAlphabet2 = alphabet.substring(key2) + alphabet.substring(0, key2);
       for(int i =0; i < encrypted.length(); i++)
       {
         char ch = encrypted.charAt(i);
         int idx = alphabet.indexOf(Character.toUpperCase(ch));
         if(idx!=-1)
         {
             char newChar;
             if(i%2 == 0)
             {
                 newChar = shiftedAlphabet1.charAt(idx);
                }
             else
             {
                 newChar = shiftedAlphabet2.charAt(idx);
                }
             if(Character.isLowerCase(ch) == true)
             {
                 newChar = Character.toLowerCase(newChar);
                 encrypted.setCharAt(i, newChar);
                }
            }
        }
       return encrypted.toString();
    }
}
